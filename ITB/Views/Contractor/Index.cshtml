@using ITB.Business
@model Contractor
@{
    ViewBag.Title = "Contractor";
}

<div id="app_contractor" class="row">
    <div class="col-md-6 top_60">
        <!-- Square switch -->
        <div class="bootstrap-switch-square pull-right">
            <span class="right_20"><span v-if="isActive">I'm Available</span><span v-if="!isActive">I'm Not Available</span></span><input type="checkbox" checked data-toggle="switch" name="square-switch" v-model="isActive" />
        </div>
        <ul class="nav nav-tabs">
            <li class="active"><a href="#">{{title}}</a></li>
        </ul>
        <div class="top_30">
            <form v-on:submit="submit">
                <div class="row">
                    <div class="col-xs-3">
                        <img src="https://source.unsplash.com/user/erondu/100x100" class="img-rounded img-responsive img-margin-left" />
                    </div>
                    <div class="col-xs-9">
                        <div class="form-group">
                            <input type="text" name="FirstName" v-model="contractor.FirstName" class="form-control" placeholder="First Name" />
                        </div>
                        <div class="form-group">
                            <input type="text" name="LastName" v-model="contractor.LastName" class="form-control" placeholder="Last Name" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <input type="text" name="Email" v-model="contractor.Email" class="form-control" placeholder="Email" disabled />
                </div>
                <div class="form-group hidden">
                    <input type="text" name="UserName" v-model="contractor.UserName" class="form-control" placeholder="UserName" disabled />
                </div>
                <hr />
                <div class="form-group">
                    <input type="text" name="GithubUrl" v-model="contractor.GithubUrl" class="form-control" placeholder="GithubUrl"  />
                </div>
                <div class="form-group">
                    <input type="text" name="WebsiteUrl" v-model="contractor.WebsiteUrl" class="form-control" placeholder="WebsiteUrl"  />
                </div>
                <div class="form-group">
                    <input type="text" name="StackoverflowUrl" v-model="contractor.StackoverflowUrl" class="form-control" placeholder="StackoverflowUrl"  />
                </div>
                <div class="form-group">
                    <input type="text" name="LinkedinUrl" v-model="contractor.LinkedinUrl" class="form-control" placeholder="LinkedinUrl"  />
                </div>
                <hr />
                <div class="form-group">
                    <input type="text" name="SelectedPosition" v-model="contractor.SelectedPosition" class="form-control" style="position:inherit!important" placeholder="Position"  />
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(m => m.ContractType, 
                        new SelectList(Enum.GetValues(typeof(ContractType))),
                        new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label>Preferred Locations:</label>
                    <input class="tagsinput" data-role="tagsinput" value="@string.Join(",", Model.SelectedCities)" data-set="tags" />
                </div>
                <div class="form-group">
                    <label>Primary Skills:</label>
                    <input class="tagsinput" data-role="tagsinput" value="@string.Join(",", Model.PrimarySkills)" data-set="pskills" />
                </div>
                <div class="form-group">
                    <label>Secondary Skills:</label>
                    <input class="tagsinput" data-role="tagsinput" value="@string.Join(",", Model.SecondarySkills)" data-set="sskills" />
                </div>
                <div class="form-group">
                    <label>Languages:</label>
                    <input class="tagsinput" data-role="tagsinput" value="@string.Join(",", Model.Languages)" data-set="languages" />
                </div>
                <div class="form-group">
                    <button id="update" type="submit" class="btn btn-primary">Update</button>
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-6 top_60">
        <ul class="nav nav-tabs">
            <li class="active"><a href="#">{{expTitle}}</a>
        </ul>
        <div class="panel-body">
            <div v-for="(exp,index) in contractor.Experiences" class="form-group">
                <a href="#" v-on:click="removeExp(index)" class="pull-right"><span class="fui-cross"></span></a>
                <strong class="">{{exp.CompanyName}}</strong>
                <small>{{exp.JobTitle}}</small><br />
                <small v-if="exp.CurrentlyWorkHere">Currently Working Here</small><br />
                <small>{{exp.Description}}</small>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group"><input type="text" name="CompanyName" id="CompanyName" class="form-control input-sm" placeholder="Company Name" /></div>
                    <div class="form-group"><input type="text" name="JobTitle" id="JobTitle" class="form-control input-sm" placeholder="Job Title" /></div>
                    <div class="form-group"><input type="text" name="Description" id="Description" class="form-control input-sm" placeholder="Description" /></div>
                    <label class="checkbox">
                        <input type="checkbox" checked="checked" data-toggle="checkbox" name="CurrentlyWorkHere" id="CurrentlyWorkHere" class="custom-checkbox">
                        <span class="icons"><span class="icon-unchecked"></span><span class="icon-checked"></span></span>Currently Work Here
                    </label>

                    <input v-on:click="addExp" type="button" value="Add more experiences" class="btn btn-sm" />
                </div>
            </div>
        </div>

        <ul class="nav nav-tabs">
            <li class="active"><a href="#">{{eduTitle}}</a></li>
        </ul>
        <div class="panel-body">
            <div v-for="(edu,index) in contractor.Educations" class="form-group">
                <a href="#" v-on:click="removeEdu(index)" class="pull-right"><span class="fui-cross"></span></a>
                <strong class="">{{edu.Institution}}</strong>
                <small>{{edu.GraduationResult}}</small>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group"><input type="text" name="Institution" id="Institution" class="form-control input-sm" placeholder="Institution" /></div>
                    <div class="form-group"><input type="text" name="GraduationResult" id="GraduationResult" class="form-control input-sm" placeholder="GraduationResult" /></div>

                    <input v-on:click="addEdu" type="button" value="Add other education" class="btn btn-sm" />
                </div>
            </div>
        </div>

        <ul class="nav nav-tabs">
            <li class="active"><a href="#">{{certTitle}}</a></li>
        </ul>
        <div class="panel-body">
            <div v-for="(cert,index) in contractor.Certificates" class="form-group">
                <a href="#" v-on:click="removeCert(index)" class="pull-right"><span class="fui-cross"></span></a>
                <strong class="">{{cert.Name}}</strong>
                <small>{{cert.CertDocument}}</small>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group"><input type="text" name="Name" id="Name" class="form-control input-sm" placeholder="Name" /></div>
                    <div class="form-group"><input type="text" name="CertDocument" id="CertDocument" class="form-control input-sm" placeholder="Cert Document" /></div>

                    <input v-on:click="addCert" type="button" value="Add additional certificates" class="btn btn-sm" />
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var contractorApp = new Vue({
            el: '#app_contractor',
            data: {
                dataGetURL: "/Contractor/Get",
                dataPostURL: "/Contractor/Post",
                title: "About",
                expTitle: "Experience",
                eduTitle: "Education",
                certTitle: "Certifications",
                isActive: true,
                contractor: {
                }
            },
            computed: {
                tags: {
                    get() {
                        return (this.contractor.SelectedCities || []).join(',');
                    },
                    set(newValue) {
                        this.contractor.SelectedCities = newValue.split(',');
                    }
                },
                pskills: {
                    get() {
                        return (this.contractor.PrimarySkills || []).join(',');
                    },
                    set(newValue) {
                        this.contractor.PrimarySkills = newValue.split(',');
                    }
                },
                sskills: {
                    get() {
                        return (this.contractor.SecondarySkills || []).join(',');
                    },
                    set(newValue) {
                        this.contractor.SecondarySkills = newValue.split(',');
                    }
                },
                languages: {
                    get() {
                        return (this.contractor.Languages || []).join(',');
                    },
                    set(newValue) {
                        this.contractor.Languages = newValue.split(',');
                    }
                }
            },
            methods: {
                addExp(src) {
                    var parent = $(src.target).parent("div");
                    var obj = {
                        CompanyName: parent.find("input[name=CompanyName]").val(),
                        JobTitle: parent.find("input[name=JobTitle]").val(),
                        Description: parent.find("input[name=Description]").val(),
                        CurrentlyWorkHere: parent.find("input[name=CurrentlyWorkHere]").is(':checked')
                    }
                    parent.find('input[type=text]').val('');
                    this.contractor.Experiences.push(obj);
                    this.submit();
                },
                addEdu(src) {
                    var parent = $(src.target).parent("div");
                    var obj = {
                        Institution: parent.find("input[name=Institution]").val(),
                        GraduationResult: parent.find("input[name=GraduationResult]").val()
                    }
                    parent.find('input[type=text]').val('');
                    this.contractor.Educations.push(obj);
                    this.submit();
                },
                addCert(src) {
                    var parent = $(src.target).parent("div");
                    var obj = {
                        Name: parent.find("input[name=Name]").val(),
                        CertDocument: parent.find("input[name=CertDocument]").val()
                    }
                    parent.find('input[type=text]').val('');
                    this.contractor.Certificates.push(obj);
                    this.submit();
                },
                removeExp(key) {
                    this.contractor.Experiences.splice(key, 1);
                    this.submit();
                },
                removeEdu(key) {
                    this.contractor.Educations.splice(key, 1);
                    this.submit();
                },
                removeCert(key) {
                    this.contractor.Certificates.splice(key, 1);
                    this.submit();
                },
                submit(event) {
                    if (event !== undefined)
                        event.preventDefault();
                    var self = this;
                    var button = $(this.$el).find("button#update");
                    button.text("Saving");
                    $.post(this.dataPostURL, this.contractor).fail(function () {
                        $(self.$el).find("form").validate();
                    }).always(function () {
                        button.text("Update"); });
                },
                tagsChanged() {
                    var self = this;
                    $(this.$el).find(".tagsinput").each(function () {
                        var values = $(this).val();
                        var element = $(this).data("set");
                        switch (element) {
                            case "sskills":
                                self.sskills = values;
                                break;
                            case "pskills":
                                self.pskills = values;
                                break;
                            case "languages":
                                self.languages = values;
                                break;
                            case "tags":
                                self.tags = values;
                                break;
                            default:
                                break;
                        }
                    });
                },
                 selectedContractChanged() {
                    var el = $(this.$el);
                    var selectedContractType = el.find("#ContractType :selected").text();
                    this.contractor.ContractType = selectedContractType;
                    this.submit();
                }
            },
            created() {
                var self = this;
                $.getJSON(this.dataGetURL, function (data) {
                    self.contractor = data;
                });
            },
            mounted() {
                var self = this;
                var el = $(this.$el);
                var tags = el.find(".tagsinput");
                tags.on('itemAdded', function (event) { self.tagsChanged(); });
                tags.on('itemRemoved', function (event) { self.tagsChanged(); });

                var citynames = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.whitespace,
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    prefetch: {
                        url: '/Service/Locations'
                    }
                });
                citynames.initialize();
                var skills = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.whitespace,
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    prefetch: {
                        url: '/Service/Skills'
                    }
                });
                skills.initialize();
                var positions = new Bloodhound({
                    datumTokenizer: Bloodhound.tokenizers.whitespace,
                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                    prefetch: {
                        url: '/Service/Positions'
                    }
                });
                positions.initialize();

                tags.each(function () {
                    var element = $(this).data("set");
                    switch (element) {
                        case "sskills":
                            $(this).tagsinput({
                                typeaheadjs: {
                                    source: skills, name: "skills"
                                }
                            });
                            break;
                        case "pskills":
                            $(this).tagsinput({
                                typeaheadjs: {
                                    source: skills, name: "skills"
                                }
                            });
                            break;
                        case "languages":
                            break;
                        case "tags":
                            $(this).tagsinput({
                                typeaheadjs: {
                                    source: citynames, name: "citynames"
                                }
                            });
                            break;
                        default:
                            break;
                    }
                });

                el.find("#ContractType").on("change", function (event) { self.selectedContractChanged(); });
                $('input[name=SelectedPosition]').typeahead(null, {
                    source: positions, name: "positions"
                }).change(function () {
                    self.contractor.SelectedPosition = $(this).val();
                    });
                var switcher = $("input[name=square-switch]");
                switcher.bootstrapSwitch();
                switcher.on('switchChange.bootstrapSwitch', function (event, state) {
                    self.isActive = switcher.is(':checked');
                }); 
                
                
            }
        })
    </script>
}